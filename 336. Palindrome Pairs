/*
https://leetcode.com/problems/palindrome-pairs/
Runtime: 676 ms
https://leetcode.com/submissions/detail/58320847/

idea: 爆力法.  只是string轉字元陣列的操作or 字串加字串的操作 比較花時間.  所以盡量避免.
*/

public class Solution 
{
    public List<List<Integer>> palindromePairs(String[] words) 
    {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
    
        for(int i=0;i<words.length;i++)
        {
          for(int j=0;j<words.length;j++)
          {
              if(i!=j && isParlindrome(words[i],words[j]))
              {
                  List<Integer> v=new ArrayList<Integer>();
                  v.add(i);
                  v.add(j);
                  res.add(v);
              }
          }
        }
        return res;
    }
    
    public boolean isParlindrome(String s,String s2)
    {
        int str1Length=s.length();
        int str2Length=s2.length();
        int start=0;
        int end=str2Length-1;
       /* 加了這行會爆掉= =    目前已經在limit time的邊緣.......
        if((s+s2) == null || (str1Length+str2Length) ==0)
           return false;*/
        
        while(start<str1Length && end>=0 )
        {
            if(s.charAt(start)!=s2.charAt(end))
               return false;
            start++;
            end--;
        }
        if(str1Length<str2Length)  
        {
            start=0;
            while(start<end)
            {
                if(s2.charAt(start)!=s2.charAt(end))
                   return false;
                start++;
                end--;   
            }
        }
        else if(str1Length > str2Length)  
        {
            end=str1Length-1;
            while(start<end)
            {
                if(s.charAt(start)!=s.charAt(end))
                   return false;
                start++;
                end--;   
            }
        }
        return true;
    }
}
